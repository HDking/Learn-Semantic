  ---
layout      : 'default'
css         : 'guide'
standalone  : true

title       : 'On Language'
description : ''
type        : 'Draft'
---
<%- @partial('header') %>

<div class="main container">

  <h2 class="ui header">
    Fabricating Language
  </h2>

  <p>Language is a difficult topic to discuss directly because it is such an essential part of our experience of reality. Words are the most primitive tool at our disposal to construct meaning. So ingrained is language in our comprehension of reality that even internally we explain reality through self-dialog, a stream of consciousness championed by an internal narrator explaning reality back to ourselves.</p>
  <p>Even though we continuously reap the benefits of language's evolution as a method of effectively exchanging meaning between biological information processing machines, we are still hesitant to accept its utility when constructing systems of codified meaning for computers, choosing instead to manufacture new formal systems for organizing information, often with a near religious devotion to the prescribed axioms and standards of its creators.</p>

  <h2 class="ui header">
    Tending to Tendencies
  </h2>

  <blockquote>
    "I lay claim in this novel", I heard him say, "to the essential qualities of all games: symmetry, arbitrary rules, tedium."
    <p>~Borges' <a href="http://books.google.com/books?id=1FrJqcRILaoC&pg=PA75&lpg=PA75&dq=lay+claim+in+this+novel+game+tedium+borges&source=bl&ots=pUWUsG99R-&sig=zJqgEd7QE38_IWO8kVsY-0ODf0Y&hl=en&sa=X&ei=q15VVJyvIM3LsASDzYDIDw&ved=0CDIQ6AEwAg#v=onepage&q=lay%20claim%20in%20this%20novel%20game%20tedium%20borges&f=false">Ficciones</a>
  </blockquote>

  <p>Creating a formal system is no easy task. All decisions made by an individual, even <a href="http://www.oxforddictionaries.com/us/external/files/Garner_s_American_The_Ongoing_Struggles_of_Garlic-Hangers.pdf?version=2014-10-15-1630">those with the best intentions</a> towards impartiality, add some aspects of themselves as an imprint on their work.</a>
  </p>

  <p>Programming languages are a relatively nascent technology. The first imperative programming languages appeared in the mid 1950s, making the field of programming roughly sixty years old. Unsuprisingly, many people have relatives who are older than our field's entire history.</p>

  <p>A programming language has the special requirement of requiring a <b>compiler</b>, a special set of code that interprets and encodes the meaning of the language in lower-level machine code. This requirement creates conditions where many languages are mostly authored by the single individuals, most likely engineers, who are responsible for developing their machine implementation.</p>

  <p>Even now what we know to be the entire breadth of programming syntax and concepts comes from small teams at academic institutions and corporations, who at their worst, have particular interests or business objectives attached to the success of their languages, and at their best, are biased to an expressed ideological agenda.  As many have noted, often what seem later to be the <a href="http://c2.com/cgi/wiki?IfSmalltalkIsSoGoodWhyDoesNobodyUseIt">better language</a> lose out.</p>

  <table class="ui very basic celled table">
    <thead>
      <th class="eight wide">Linguistic Concept</th>
      <th class="eight wide">Programming Concept</th>
    </thead>
    <tbody>
      <tr>
        <td>Words</td>
        <td>Instances</td>
      </tr>
      <tr>
        <td>Ideals (Forms)</td>
        <td>Classes</td>
      </tr>
      <tr>
        <td>Modifiers</td>
        <td>Properties, Settings</td>
      </tr>
      <tr>
        <td>Verbs</td>
        <td>Methods</td>
      </tr>
      <tr>
        <td>Tense</td>
        <td>State</td>
      </tr>
    </tbody>
  </table>

  <h3>Predisposition towards Individual Rational Argument</h3>

   <p>Many programmers not only solve complex abstract problems routinely, but spend their free time thinking about the meta-tendencies of solving problems. How can i write this quicker next time? How can I avoid repetitive tasks? How can I abstract this out to be re-used? There is a fundamental tendency for computer programmers who are innate problem solvers to look for intellectual solutions to problems, to see all problems as solvable using the same techniques which problems are solved inside the curly quotes of programming.</p>

   <p>These predispositions are extremely useful traits for system design, but can lead to biases as a field to intellectualize issues, to search for a unifying set of axioms which should guide all future programming. For one, simple solutions may not always feel as gratifying as <a href="http://en.wikipedia.org/wiki/Brainfuck">complex ones</a>. The current version of programmatic truth is usually seen as the Truth, the current best practices, as the only practice for a good developer, whether next year they might be disavowed or forgotten for the new big thing. Though this mania drives innovation forward, many of these <em>new big thing</em>s become the <em>old standard</em>s soon enough, but they nonetheless encourage a shared, irrational obsession with novel rational appeal.</p>

  <h3>Predisposition towards Prescription</h3>
  <p>Classifying, creating rules, drawing boundaries are all essential parts of being a programmer. Much of what makes up the functionality of programming may not have common accepted language, so individuals are forced to construct language more than many other fields. Many of those 'named things' in programming, the guts of a program, will only be read by several people in their lifetime, sometimes even one, so the conventions can be determined by particular, singular conditions.</p>
  <p>Programmers who are limited by the predetermined syntax of interpreted languages (the parts of code defined for machines), feel bound to use similar machine-like rules for naming the parts of code defined just for other human editors.</p>

  <h3>Predisposition towards the Primacy of Computational Efficiency</h3>
  <p>Many coding languages are still chosen under the belief that the most important features of a language is computational efficiency. For a long time this was true. Systems were just too slow, and compilers too inefficient to deal with code that didn't make <b>the needs of computers paramount</b>. This may have been painfully obvious in a period of time when <a href="http://www.mkomo.com/cost-per-gigabyte-update">most personal computers didn't have hard drives</a>.</p>

  <p> But this period is drawing to a close. Not only are processors' transistors now only a few nanometers wide, but compiler improvements by browser-makers increase performance by <a href="http://blog.chromium.org/2010/12/new-crankshaft-for-v8.html">double digits</a> regularly.</p>
  <p>The age when images, text, and video cannot be constructed, manipulated, and animated on a page at sixty frames-per-second are drawing to a close, yet many programming languages do not appear to acknowledge the need to adjust for this shift in focus.</p>


  <h2 class="ui header">Twin Brothers</h2>

  <p>Even if <a href="http://en.wikipedia.org/wiki/Functionalism_(philosophy_of_mind)">pure functionalism</a> and the talk of humans as being peculiar types of machines makes you want to run and hide in a <a href="http://en.wikipedia.org/wiki/Chinese_room">far-away room</a>, the argument that natural languages are much better equipped than prescribed languages to create meaning doesn't necessarily have to be tackled philosophically.</p>
  <p>Many features of natural languages are <a href="http://huh.ideophone.org/">convergent</a>, arising simultenously in different parts of the world with no contact. Natural languages even evolved under similar constraints as programming languages.</p>

  <p>Bandwidth plays a critical role in natural languages, being even more restrictive than computer systems. Speaking requiring us to physically contort internal valves in our larynx to modulate the frequency of waves of air pressure at a rate of only <a href="http://en.wikipedia.org/wiki/Words_per_minute#Speech_and_listening">150 or so words</a> per minuteâ€”and that's not say anything of the <a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC1315292/">fascinating complexity</a> in our capacity to observe those same modulations.</p>
  <p>Natural languages are also designed to limit not just the length of encoding to a collection of sounds, but also to optimally limit the conceptual scope of ideas into classes, <b>nouns</b>, and account for varying implementations of an idea effectively through qualifiers.</p>
  <p>Often times the <b>connotations</b> (tech-speak: "implementation") may vary from person to person of an idea. <b>Love</b> may connote ideas of romantic love, or in others felings of agape, or specific memories with <a href="http://en.wikipedia.org/wiki/Qualia">a quality</a> you only can understand, yet four letters and one sylabble are enough to contain the concept.</p>
  <p>A single idea may also vary from instance to instance. A normal <b>horse</b> might have four legs, but if you encountered a three-legged horse you would find no difficulty considering it a horse. In fact, you may never encounter a three-legged horse, and still might store space for it conceptually based purely on your imagination of the possibility. Or the classic Wittgenstein example of  "<a href="http://en.wikipedia.org/wiki/Language-game_(philosophy)#Description">What is a game?</a>". Natural language can accomodate for these variations in implementation, tempered by a "development history" that started longer ago than we even had the means to record it</p>

  <h2 class="ui header">Narrowing the Focus</h2>

  <h3 class="ui header">Creating a Vocabulary for Design</h3>
  <p>Individual interface elements are the <b>nouns</b> (tech-speak: "classes") which provide a <b>context</b> ("scope") to <b>limit the broadness</b> ("encapsulate") of <b>modifiers</b> ("properties") and <b>behaviors</b> ("methods").</p>
  <p>Natural languages are used today for describing interface design, although they aren't usually considered in the actual process of coding interfaces. Words like <b>popup</b>, <b>dropdown</b>, and <b>modal</b> didn't exist twenty years ago, yet now most people who visit websites understand these as essential elements of a design. They know what to expect from their behavior, how to use them, and can distinguish them in a design.</p>

  <h3 class="ui header">Well What is "Everyone Else" Doing?</h3>

  <p>The resolute success industry-wide of "flattening" design: removing gradients and reducing the use of shadows, recanting of skeumorphic design, defining relationships through negative spacing instead of borders, etc. shows there is a directionality to interface languages. We can convey meaning with less <a href="http://www.interaction-design.org/encyclopedia/affordances.html">affordances</a> than ever, not primarily because web developers' understanding of design has evolved, but because <b>users' understanding of design has evolved from years of usage</b>.</p>

  <h2 class="ui header">Drawing Limits</h2>
  <p>It's important to explain, that this argument only applies directly to <b>exchange languages like HTML</b> and not all programming languages. The meat and potatoes of most programming can be much more complex. Moods, sentiments, feelings â€” the internal "processing languages" of meaning in organic systems can difficult to comprehend, and utterly unaccountable by language.</p>

</div>
